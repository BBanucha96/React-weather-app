{"version":3,"sources":["components/core.js","components/navigation.js","App.js","serviceWorker.js","index.js"],"names":["Core","state","city","weather","temperature","img","isInputCorrect","currentCity","handleChange","e","setState","target","value","getRandomCity","citiesArray","randomCity","Math","floor","random","length","mountNewCity","submitForm","key","type","calculateTemperature","kelvin","round","props","degreesType","celcious","fahrenheit","displayWeather","this","undefined","apiUrl","process","Axios","get","then","data","main","temp","catch","className","style","backgroundImage","onChange","onKeyDown","onClick","Component","Navigation","isActive","updateDegrees","innerText","toLowerCase","prevState","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23164803.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/core.scss'\r\nimport AutosizeInput from 'react-input-autosize';\r\nimport Axios from 'axios';\r\n\r\nclass Core extends Component {\r\n    state = {\r\n        city: \"Warsaw\",\r\n        weather: \"\",\r\n        temperature: \"\",\r\n        img: \"\",\r\n        isInputCorrect: true,\r\n        currentCity: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.mountNewCity();\r\n    }\r\n\r\n    mountNewCity(city = this.state.city) {\r\n        if (city === this.state.currentCity || city === \"\" || city === undefined) {\r\n            this.setState({\r\n                isInputCorrect: false\r\n            })\r\n        } else {\r\n            const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${process.env.REACT_APP_WEATHER_API_KEY}`;\r\n            Axios.get(apiUrl)\r\n                .then((data) => (this.setState({\r\n                    weather: data.data.weather[0].main,\r\n                    temperature: data.data.main.temp,\r\n                    img: `/img/${data.data.weather[0].main}.svg`,\r\n                    isInputCorrect: true,\r\n                    currentCity: city,\r\n                    city: city\r\n                })\r\n                ))\r\n                .catch(() => {\r\n                    this.setState({\r\n                        isInputCorrect: false\r\n                    })\r\n                })\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            city: e.target.value,\r\n            isInputCorrect: true\r\n        })\r\n    }\r\n\r\n    getRandomCity = () => {\r\n        const citiesArray = [\"Warsaw\", \"Barcelona\", \"Prague\", \"Paris\", \"Brasil\",\r\n            \"London\", \"Berlin\", \"Budapest\", \"Wien\", \"Trypolis\", \"Algier\", \"New York\",\r\n            \"Santiago\", \"Buenos Aires\", \"Sidney\", \"Caracas\", \"Panama\", \"Quito\"];\r\n        let randomNumber = Math.floor(Math.random() * citiesArray.length);\r\n        let randomCity = citiesArray[randomNumber];\r\n        this.setState({\r\n            city: randomCity\r\n        })\r\n        this.mountNewCity(randomCity)\r\n    }\r\n\r\n    submitForm = (e) => {\r\n        if (e.key === 'Enter' || e.target.type === \"submit\") {\r\n            this.mountNewCity(this.state.city)\r\n        }\r\n    }\r\n\r\n    calculateTemperature = (kelvin) => {\r\n        kelvin = Math.round(kelvin);\r\n        if (this.props.degreesType === \"celcious\") {\r\n            let celcious = kelvin - 273;\r\n            celcious = `${celcious}°C`\r\n            return celcious;\r\n        } else if (this.props.degreesType === \"fahrenheit\") {\r\n            let fahrenheit = Math.floor(1.8 * (kelvin - 273) + 32);\r\n            fahrenheit = `${fahrenheit}°F`\r\n            return fahrenheit\r\n        } else {\r\n            return `${kelvin}°K`\r\n        }\r\n    }\r\n\r\n    displayWeather = () => {\r\n        switch (this.state.weather) {\r\n            case \"Clouds\":\r\n                return \"Cloudy\";\r\n            case \"Mist\":\r\n                return \"Misty\";\r\n            case \"Snow\":\r\n                return \"Snowy\";\r\n            case \"Rain\":\r\n                return \"Rainy\";\r\n            case \"Clear\":\r\n                return \"Clear\";\r\n            default:\r\n                return \"Unknown\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"display\">\r\n                <div className=\"weather-img\" style={{ backgroundImage: `url(${this.state.img})` }}></div>\r\n                <div className=\"short-desc\">\r\n                    <h2>CURRENTLY IN <AutosizeInput className={this.state.isInputCorrect ? \"input-correct\" : \"input-wrong\"} type=\"text\" value={this.state.city} onChange={(e) => this.handleChange(e)} onKeyDown={(e) => this.submitForm(e)} /> IT'S </h2>\r\n                </div>\r\n                <div className=\"weather-condition\"><h1>{this.displayWeather()}</h1></div>\r\n                <div className=\"temperature\"><p>{this.calculateTemperature(this.state.temperature)}</p></div>\r\n                <div className=\"buttons\">\r\n                    <button className=\"random-btn btn\" onClick={() => this.getRandomCity()}>RANDOM PLACE</button>\r\n                    <button className=\"search-btn btn\" onClick={(e) => this.submitForm(e)}>CHECK WEATHER</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Core;","import React, { Component } from \"react\";\r\nimport '../styles/navigation.scss'\r\n\r\nclass Navigation extends Component {\r\n    state = {\r\n        isActive: false\r\n    }\r\n\r\n    updateDegrees = (e) => {\r\n        this.props.updateDegrees(e.target.innerText.toLowerCase())\r\n    }\r\n\r\n    handleClick() {\r\n        this.setState(prevState => ({\r\n            isActive: !prevState.isActive\r\n        }));\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <nav>\r\n                <div className=\"logo\">\r\n                    <h4>Weather app</h4>\r\n                </div>\r\n                <ul className={this.state.isActive ? \"navbar-links navbar-active\" : \"navbar-links\"}>\r\n                    <li className=\"navbar-item\" onClick={(e) => this.updateDegrees(e)}>Celcious</li>\r\n                    <li className=\"navbar-item\" onClick={(e) => this.updateDegrees(e)}>Fahrenheit</li>\r\n                </ul>\r\n                <div className={this.state.isActive ? \"burger spin\" : \"burger\"} onClick={() => this.handleClick()}>\r\n                    <div className=\"line-1\"></div>\r\n                    <div className=\"line-2\"></div>\r\n                    <div className=\"line-3\"></div>\r\n                </div>\r\n            </nav>)\r\n    }\r\n}\r\n\r\nexport default Navigation;","import React, { Component } from 'react';\nimport './App.css';\nimport Core from './components/core';\nimport Navigation from './components/navigation';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      degreesType: \"celcious\"\n    }\n  }\n\n  updateDegrees(degreesType) {\n    this.setState({\n      degreesType: degreesType\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation degreesType={this.state.degreesType} updateDegrees={(e) => this.updateDegrees(e)}></Navigation>\n        <Core degreesType={this.state.degreesType}></Core>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}